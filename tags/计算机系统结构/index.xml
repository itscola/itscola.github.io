<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>计算机系统结构 on White_cola Blog</title>
    <link>https://itscola.github.io/tags/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%B3%BB%E7%BB%9F%E7%BB%93%E6%9E%84/</link>
    <description>Recent content in 计算机系统结构 on White_cola Blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-cn</language>
    <copyright>思维不受限,创意无极限.</copyright>
    <lastBuildDate>Thu, 22 Apr 2021 00:00:00 +0000</lastBuildDate><atom:link href="https://itscola.github.io/tags/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%B3%BB%E7%BB%9F%E7%BB%93%E6%9E%84/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>1.2.1计算机系统结构的概念</title>
      <link>https://itscola.github.io/blog/2.computersystemframework-1.2.1/</link>
      <pubDate>Thu, 22 Apr 2021 00:00:00 +0000</pubDate>
      
      <guid>https://itscola.github.io/blog/2.computersystemframework-1.2.1/</guid>
      <description>A. 计算机系统结构 和 组成 和 实现 1 要看懂本篇文章，你可能需要先看之前的文章。这是一个系列，讲解计算机系统结构。 如果你正在学这门科目，那这个系列将非常适合你。
这个系列并不是普通的“笔记”，而是以我个人的理解，来讲解 计算机系统结构。 不同的是，我会用尽可能简洁通俗的语言来讲解。
计算机系统结构系列
1. 什么是计算机系统结构 1. 透明性 先要清楚一个概念，什么是透明性？
透明性： 一些客观存在的属性或事物，在某个角度看不到，那么就说那些属性或事物对于这个角度是透明的。
举个例子：我们在使用操作系统时，我们是看不到 组成这台计算机的零件 是如何运作的。
可以说 “组成这台计算机的零件 是如何运作的”对于我们从使用操作系统这个角度，是透明的。
2. 透明性的作用 理解了透明性，那大概能猜出这样的作用了。
 简化所在机器级的设计。(好处) 透明也会带来一些无法控制的问题。(坏处)  我们在一个角度上，不怎么需要太在意对我们透明的事物属性。这大大简化了我们的使用。
但是有时候，我们在一个角度上，必须要在意对我们透明的事物属性，这会给我们带来不利。这也是无法控制的问题。
3. 系统结构 及其研究 在研究计算机系统结构前，先来了解下什么是 系统结构。
系统结构：以计算机系统结构的角度说，系统结构指的是，计算机系统中 各机器级界面的定义 以及上下功能的分配。
什么意思？ 各机器级上的界面，定义为什么。 上下级功能分配了什么。我们将这 定义 分配 称为系统结构。
系统结构的研究： 在定义 和 分配时 我们要对 某些事物属性进行划分。哪些属于这里，哪些属于那里。换言说，我们就是在 研究 哪些属性应该透明，哪些属性不应该透明。
4. 计算机系统结构 及其研究 概念： 计算机系统结构 是 系统结构 的一部分。
它又被称为 计算机系统的结构体系。 它指的就是 传统机器语言机器级 的系统结构。</description>
    </item>
    
    <item>
      <title>1.1计算机系统层次结构</title>
      <link>https://itscola.github.io/blog/1.computersystemframework-1/</link>
      <pubDate>Wed, 21 Apr 2021 00:00:00 +0000</pubDate>
      
      <guid>https://itscola.github.io/blog/1.computersystemframework-1/</guid>
      <description>A.计算机系统层级结构 这一篇，来说下计算机的 基础理论知识。
它属于计算机系统结构的内容. 关于计算机系统结构，可能会做一个系列。
一. 计算机系统的层次 1. 概念 通用计算机系统层次 分为6个级，每个级我们称之为 “机器级”。 距离人的使用越近的，越为高级，反之，越远，越为低级。
从高级到低级，分别有 应用语言机器级，高级语言机器级，汇编语言机器级，操作系统机器级，传统机器语言机器级，微程序机器级。
记得有张图，有个大学教授问“vscode是什么语言？”，引起很多人“嘲讽”。 我认为它大概问的就是机器级。 应回答 “应用语言”。
2. 分机器级的意义 透明的概念：在分级的情况下，任意一级(有下一级的情况下)的下级，对于这级通常都是不必太关心的。但下级是客观存在的。我们就说,对于这一级,那些下一级都是透明的.
举个例子：我们要用java语言开发一个程序，我们通常不需要在乎，这个电脑用的什么显卡，用的什么主板，用的什么处理方式。 这些对于我们来说都是透明的。
二.机器级的实现 1.实现的两种方式 机器级等实现主要通过两种方式。
翻译 或 解释 或是 解释翻译 并用。
翻译技术：先用转换器，将上一级机器级的程序翻译为下一级等效的程序。然后在下一级机器级继续实现。
举个例子：C语言程序会由编译程序翻译成汇编程序，汇编程序由汇编器翻译成机器语言程序。
解释技术：用第一级的机器级上的一串语句或指令来仿真高级机器级的一条语句，或指令功能。（运行过程中 逐条逐句的解释）
例子：JavaScript由浏览器解释执行，如果有错误，通常不会影响到前面的代码。
2.翻译和解释的特点  翻译往往是所有程序做完再执行，而解释是一边解释一边执行。 解释过程中 解释一条 运行一条 灵活性更高。  什么是编译器,解释器? (一文理解编译型和解释型语言)
3.机器级间的特点  应用语言 程序通过程序包翻译成高级语言程序。 高级语言 程序通过编译程序编译成汇编语言程序。（或是 中间代码，再或是 机器语言程序） 汇编语言 程序通过汇编程序翻译成机器语言程序。 操作系统 通过机器语言程序 解释 控制语句作业。 传统机器机器级由 微程序(固件) 实现。 而前四个都由软件实现。  固件是指通过硬件实现软件功能。 如常见的BIOS ，它通常不会改变，但又不是不可改变。</description>
    </item>
    
  </channel>
</rss>
