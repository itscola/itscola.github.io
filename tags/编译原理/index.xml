<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>编译原理 on White_cola Blog</title>
    <link>https://itscola.github.io/tags/%E7%BC%96%E8%AF%91%E5%8E%9F%E7%90%86/</link>
    <description>Recent content in 编译原理 on White_cola Blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-cn</language>
    <copyright>失落和喜悦不断交缠，执着的一切充满挑战。
 Blog Powered by Hugo.</copyright>
    <lastBuildDate>Thu, 25 Feb 2021 00:00:00 +0000</lastBuildDate><atom:link href="https://itscola.github.io/tags/%E7%BC%96%E8%AF%91%E5%8E%9F%E7%90%86/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>什么是编译器,解释器? (一文理解编译型和解释型语言)</title>
      <link>https://itscola.github.io/blog/compiler-and-interpreter/</link>
      <pubDate>Thu, 25 Feb 2021 00:00:00 +0000</pubDate>
      
      <guid>https://itscola.github.io/blog/compiler-and-interpreter/</guid>
      <description>编程语言  我们所用的程序都是用某种语言写的, 但是它会先被翻译成能被计算机执行的语言之后才能运行. 通常人们会通过它用了 编译器(compiler) 还是 解释器(interpreter) 来判定他解释型还是编译型语言. 如java这种又用了 编译器 又用了 解释器 通常被我们称为 半解释半编译型语言.  编译器和解释器 编译器 编译器就是一个程序.它会把我们的 源代码写的程序 翻译成 一种等价的 另一种语言 写的程序.
在它进行翻译的过程中, 还会报告它在源代码中发现的错误.
 源代码写的程序 -编译器-&amp;gt; 目标程序
目标程序就可以处理 用户的输入 得到对应的 输出  解释器 解释器不会进行翻译来生成目标程序, 而是直接通过 用户的输入 和 源程序 来生成目标程序.
 源代码写的程序 + 用户的输入 -解释器-&amp;gt; 目标程序  优缺点  通过编译器生成的目标程序 来处理用户的输入 通常比用一个解释器快很多. 通过解释器来运行 由于它是逐个语句来执行 错误诊断效果通常比编译器好.  Java的半编译半解释 Java就是个半编译半解释形语言 java源程序会被编译成字节码(bytecode)(中间代码),然后再由JVM(java虚拟机) 解释执行. 也通过中间代码 实现了跨平台.
补充 在编译器和解释器前后, 还会有一些其他步骤. 这边主要聊编译器和解释器.</description>
    </item>
    
  </channel>
</rss>
