<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>开发 on White_cola Blog</title>
    <link>https://itscola.github.io/tags/%E5%BC%80%E5%8F%91/</link>
    <description>Recent content in 开发 on White_cola Blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-cn</language>
    <copyright>作出重大发明的年轻人, 大多是敢于向千年不变的戒规, 定律挑战的人 -- 费尔马</copyright>
    <lastBuildDate>Fri, 05 Mar 2021 00:00:00 +0000</lastBuildDate><atom:link href="https://itscola.github.io/tags/%E5%BC%80%E5%8F%91/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>想秀技术, 做项目发布 比 发文章更有用.</title>
      <link>https://itscola.github.io/blog/and-then/</link>
      <pubDate>Fri, 05 Mar 2021 00:00:00 +0000</pubDate>
      
      <guid>https://itscola.github.io/blog/and-then/</guid>
      <description> 通俗还是专业 写文章时，会有个严重问题。 你写专业了 用各种专业名词 ，学习的人看不懂。 你写通俗了，别人又觉着不专业 深度不够。
究竟是想炫耀技术 还是真正想科普知识？ 科普文章是给不会的人看的。面向这些人，上一堆专业名词 各种技术方式 ， 新人能听懂？？ 就像要学习一门技术 没多少人会去 百度百科 等地方学习。
文章是给不懂的人看的 写个技术文章，不给不懂的人看， 还想给全部都会的人看？ 加一堆让新人难以看懂的内容， 或是简单的写点只能提示自己的内容 ，为了浪费阅读者的时间？
想秀技术 写个实用强大的项目发布 都比发个文章有用 </description>
    </item>
    
    <item>
      <title>一元线性回归的概念 (A linear regression)</title>
      <link>https://itscola.github.io/blog/what-is-a-linear-regression-equation/</link>
      <pubDate>Thu, 04 Mar 2021 00:00:00 +0000</pubDate>
      
      <guid>https://itscola.github.io/blog/what-is-a-linear-regression-equation/</guid>
      <description>欢迎, 这是机器学习系列的第二篇文章 此文章是我在 Machine Learning 学习过程中以自己的理解做的总结
文章追求以最通俗的方式, 把机器学习带给所有人爱好者.
一元线性回归 我们手里有一家公司的员工 工资经验 和 对应薪水 数据, 假如我们有3.4年工作经验, 那我们提出多少工资比较好呢 ?
阅读之前, 确保你已经读懂了上一篇文章.
什么是一元线性回归 你可以理解为 我们通过 最合适的方式 把零散的数据变成规律的线(面). 从而用来进行对 因变量(我们需要预测的数据) 预测.
最合适的方式? 通过 某种函数关系(后面会讲) 得到的最为公平的 理想数据 它是规律的线 面.
一元指的是 这些数据只有一个自变量(特征). 例如上方的图片, 这个数据只有 一个自变量(工作经验(年)) 一个因变量(工资).
当然, 有一元 还会有 多元, 这就是后面的文章了.
一元线性回归模型 什么是模型? 模型是我们上一篇提到过的 &amp;ldquo;机器学习模型&amp;rdquo; 你可能不记得了, 这边再说一下.
如果我们想实现通过 自变量(特征) 来预测 因变量. 那么我们需要建立一个模型, 先让 机器学习模型 进行学习, 然后我们就可以用 机器学习的成果 来用 自变量(特征) 预测 因变量.
一元线性回归模型, 就说一个简单的模型, 我们通常可以直接使用.
这个模型可以表达为:</description>
    </item>
    
    <item>
      <title>机器学习的概念 (Machine Learning)</title>
      <link>https://itscola.github.io/blog/what-is-machine-learning/</link>
      <pubDate>Mon, 01 Mar 2021 00:00:00 +0000</pubDate>
      
      <guid>https://itscola.github.io/blog/what-is-machine-learning/</guid>
      <description>此文章是我在 Machine Learning 学习过程中以自己的理解做的总结
文章追求以最通俗的方式, 让所有阅读者理解机器学习的概念.
什么是机器学习？ 当我们建立一个机器学习模型。机器学习模型中会包含了自变量（特征），和因变量。 然后基于模型让机器学习数据，之后我们可以做到 通过自变量 (特征) 让机器学习告诉我们因变量。 这就是机器学习。
总结来讲, 机器学习就是让机器学习数据之间的关系, 我们可以用学习到的结果,对新数据进行预测.
简单的例子 假如我们有一些用户数据。其中每个用户的数据包括了 年龄 薪水 地区 和 是否该买了我们的产品。 我们可以通过机器学习 实现 只要有 年龄 薪水 地区 就可以让机器预判出 是否会购买我们的产品。
机器学习是未来？ 这个问题，与其说一大堆，不如由你自己判断。对于它的好坏，我们都应该理性看待。而不是人云亦云。
它和深度学习 人工智能的关系 人工智能包括了机器学习 而机器学习又包括了深度学习。
人工智能 &amp;gt; 机器学习&amp;gt; 深度学习
人工智能: 使计算机能模拟人的思维.
它和深度学习的区别 深度学习的实现 借鉴了人脑的神经元。它通常用于处理很复杂的事情。比如很多生活中的事情，要考虑很多因素。
深度学习可以自动提取 特征(因变量). 而机器学习需要手动提取 特征(因变量).</description>
    </item>
    
    <item>
      <title>什么是编译器,解释器? (一文理解编译型和解释型语言)</title>
      <link>https://itscola.github.io/blog/compiler-and-interpreter/</link>
      <pubDate>Thu, 25 Feb 2021 00:00:00 +0000</pubDate>
      
      <guid>https://itscola.github.io/blog/compiler-and-interpreter/</guid>
      <description>编程语言  我们所用的程序都是用某种语言写的, 但是它会先被翻译成能被计算机执行的语言之后才能运行. 通常人们会通过它用了 编译器(compiler) 还是 解释器(interpreter) 来判定他解释型还是编译型语言. 如java这种又用了 编译器 又用了 解释器 通常被我们称为 半解释半编译型语言.  编译器和解释器 编译器 编译器就是一个程序.它会把我们的 源代码写的程序 翻译成 一种等价的 另一种语言 写的程序.
在它进行翻译的过程中, 还会报告它在源代码中发现的错误.
 源代码写的程序 -编译器-&amp;gt; 目标程序
目标程序就可以处理 用户的输入 得到对应的 输出  解释器 解释器不会进行翻译来生成目标程序, 而是直接通过 用户的输入 和 源程序 来生成目标程序.
 源代码写的程序 + 用户的输入 -解释器-&amp;gt; 目标程序  优缺点  通过编译器生成的目标程序 来处理用户的输入 通常比用一个解释器快很多. 通过解释器来运行 由于它是逐个语句来执行 错误诊断效果通常比编译器好.  Java的半编译半解释 Java就是个半编译半解释形语言 java源程序会被编译成字节码(bytecode)(中间代码),然后再由JVM(java虚拟机) 解释执行. 也通过中间代码 实现了跨平台.
补充 在编译器和解释器前后, 还会有一些其他步骤. 这边主要聊编译器和解释器.</description>
    </item>
    
    <item>
      <title>Gradle快速掌握基础用法</title>
      <link>https://itscola.github.io/blog/gradle-basic/</link>
      <pubDate>Wed, 24 Feb 2021 00:00:00 +0000</pubDate>
      
      <guid>https://itscola.github.io/blog/gradle-basic/</guid>
      <description>Why Gradle？  Gradle是一款自动化构建项目的开源工具。 它使用Groovy来声明项目设置。和maven相比，它抛弃了繁杂的xml配置，同时配置文件做到简洁美观。 很多开源项目 需要使用gradle构建。 Java应用为主 目前支持 Java、Groovy、Kotlin和Scala.  下载并配置 下载地址： 点击下载 这里下载all版本，包含了源码、文档、示例等内容。
配置环境变量：  将压缩包解压到任意目录. 打开环境变量配置，添加系统变量到这个目录，命名为Gradle_Home。 选择用户变量中的path，添加%Gradle_Home%/bin 。 在cmd中输入 gradle -v 如果出现显示的gradle版本，代表配置成功。  使用本地maven仓库 如果每个项目都要从maven仓库下载一次依赖, 那么将会占用很多空间, 并影响开发效率. 我们可以通过配置环境变量, 先让gradle找本地下载过的依赖, 如果没有 那再去maven仓库下载.
首先选择一个本地的maven仓库文件夹路径. 然后打开环境变量配置, 在系统变量新建一个变量 变量名为 GRADLE_USER_HOME 变量值为上一步选择的本地 maven仓库文件夹.
今后gradle会先从本地maven仓库找jar包 , 找不到再去maven仓库下载到本地maven仓库.
IDEA创建gradle项目与配置 在Idea中创建Gradle项目 配置build.gradle  主要配置内容:
   repositories主要是选定的maven仓库 默认为maven中央仓库
当然你也可以添加仓库 可以参考 阿里的Maven仓库镜像 的教程来设定  在denpdencies添加jar坐标(依赖):   从你所添加的maven仓库添加:
这里用默认的 maven中央仓库. 首先打开你所要添加的仓库页面, 搜索你要添加的jar. 点击search. 找到后点击.</description>
    </item>
    
  </channel>
</rss>
